.PHONY: test-unit test-integration test-all test-coverage clean deps help

# Vari√°veis
GO_FILES := $(shell find . -name "*.go" -type f)
TEST_TIMEOUT := 60s
COVERAGE_FILE := coverage.out

# Comandos principais
help: ## Mostra esta mensagem de ajuda
	@echo "Comandos dispon√≠veis:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-20s %s\n", $$1, $$2}'

deps: ## Instala depend√™ncias do projeto
	@echo "üì¶ Instalando depend√™ncias..."
	go mod tidy
	go mod download

test-unit: ## Executa apenas testes unit√°rios (sem containers)
	@echo "üß™ Executando testes unit√°rios..."
	go test -timeout $(TEST_TIMEOUT) -short ./...

test-integration: ## Executa testes de integra√ß√£o com container compartilhado
	@echo "üê≥ Executando testes de integra√ß√£o..."
	TEST_CONTAINER_REUSE=true go test -v -timeout $(TEST_TIMEOUT) -v ./internal/...

test-integration-clean: ## Executa testes de integra√ß√£o sem reutilizar containers
	@echo "üê≥ Executando testes de integra√ß√£o (sem reutiliza√ß√£o)..."
	TEST_CONTAINER_REUSE=false go test -timeout $(TEST_TIMEOUT) -v ./internal/...

test-integration-external: ## Executa testes usando Elasticsearch externo
	@echo "üîó Executando testes com Elasticsearch externo..."
	USE_EXTERNAL_ES=true ES_URL=http://localhost:9209 go test -timeout $(TEST_TIMEOUT) -v ./internal/... -count=1

test-all: ## Executa todos os testes
	@echo "üöÄ Executando todos os testes..."
	TEST_CONTAINER_REUSE=true go test -timeout $(TEST_TIMEOUT) ./...

test-coverage: ## Executa testes com relat√≥rio de cobertura
	@echo "üìä Executando testes com cobertura..."
	TEST_CONTAINER_REUSE=true go test -timeout $(TEST_TIMEOUT) -coverprofile=$(COVERAGE_FILE) ./...
	go tool cover -html=$(COVERAGE_FILE) -o coverage.html
	@echo "üìÑ Relat√≥rio de cobertura gerado em coverage.html"

test-parallel: ## Executa testes em paralelo (demonstra√ß√£o)
	@echo "‚ö° Executando testes em paralelo..."
	TEST_CONTAINER_REUSE=true go test -timeout $(TEST_TIMEOUT) -parallel 4 ./...

test-debug: ## Executa testes com logs de debug
	@echo "üîç Executando testes com debug..."
	DEBUG_TEST_CONTAINERS=true TEST_CONTAINER_REUSE=true go test -timeout $(TEST_TIMEOUT) -v ./...

test-benchmark: ## Executa benchmarks comparando antes/depois
	@echo "‚è±Ô∏è Executando benchmarks..."
	go test -bench=. -benchmem ./...

clean: ## Remove arquivos tempor√°rios e containers √≥rf√£os
	@echo "üßπ Limpando arquivos tempor√°rios..."
	rm -f $(COVERAGE_FILE) coverage.html
	go clean -testcache
	@echo "üê≥ Removendo containers √≥rf√£os..."
	-docker container prune -f
	-docker volume prune -f

fmt: ## Formata c√≥digo Go
	@echo "üé® Formatando c√≥digo..."
	go fmt ./...

lint: ## Executa linter (se dispon√≠vel)
	@echo "üîç Executando linter..."
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "‚ö†Ô∏è  golangci-lint n√£o encontrado. Instalando..."; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
		golangci-lint run; \
	fi

vet: ## Executa go vet
	@echo "üîç Executando go vet..."
	go vet ./...

# Comandos para desenvolvimento
dev-setup: deps ## Configura ambiente de desenvolvimento
	@echo "‚öôÔ∏è Configurando ambiente de desenvolvimento..."
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@echo "‚úÖ Ambiente configurado!"

dev-test: fmt vet test-integration ## Executa pipeline completo de desenvolvimento
	@echo "‚úÖ Pipeline de desenvolvimento conclu√≠do!"

# Comandos para Elasticsearch externo via Docker Compose
es-up: ## Inicia Elasticsearch via Docker Compose
	@echo "üöÄ Iniciando Elasticsearch com Docker Compose..."
	docker-compose up -d elasticsearch
	@echo "‚è≥ Aguardando Elasticsearch ficar pronto..."
	@for i in $$(seq 1 30); do \
		if curl -f http://localhost:9209/_cluster/health >/dev/null 2>&1; then \
			echo "‚úÖ Elasticsearch pronto em http://localhost:9209"; \
			exit 0; \
		fi; \
		sleep 2; \
	done; \
	echo "‚ùå Elasticsearch n√£o ficou pronto em 60s"; \
	exit 1

es-down: ## Para Elasticsearch via Docker Compose
	@echo "üõë Parando Elasticsearch..."
	docker-compose down

es-restart: ## Reinicia Elasticsearch via Docker Compose
	@echo "üîÑ Reiniciando Elasticsearch..."
	docker-compose restart elasticsearch

es-logs: ## Mostra logs do Elasticsearch
	@echo "üìã Logs do Elasticsearch:"
	docker-compose logs -f elasticsearch

es-status: ## Verifica status do Elasticsearch
	@echo "üìä Status do Elasticsearch:"
	@curl -f http://localhost:9209/_cluster/health?pretty 2>/dev/null || echo "‚ùå Elasticsearch n√£o est√° acess√≠vel"

test-with-compose: es-up test-integration-external es-down ## Executa testes completos com Docker Compose

# Comandos para CI/CD
ci-test: ## Comando otimizado para CI/CD
	@echo "ü§ñ Executando testes no CI/CD..."
	USE_EXTERNAL_ES=true ES_URL=http://elasticsearch:9200 go test -timeout $(TEST_TIMEOUT) -v ./...

# Demonstra√ß√µes e exemplos
demo-before-after: ## Demonstra diferen√ßa de performance antes/depois
	@echo "üìà Demonstra√ß√£o de performance..."
	@echo "üî¥ ANTES: Cada teste cria seu pr√≥prio container"
	TEST_CONTAINER_REUSE=false time go test -timeout $(TEST_TIMEOUT) ./internal/repository/...
	@echo ""
	@echo "üü¢ DEPOIS: Container compartilhado"
	TEST_CONTAINER_REUSE=true time go test -timeout $(TEST_TIMEOUT) ./internal/repository/...

demo-isolation: ## Demonstra isolamento entre testes
	@echo "üîí Demonstra√ß√£o de isolamento..."
	DEBUG_TEST_CONTAINERS=true TEST_CONTAINER_REUSE=true go test -timeout $(TEST_TIMEOUT) -v -run "TestIsolation" ./...

# Utilit√°rios
check-containers: ## Lista containers de teste ativos
	@echo "üê≥ Containers de teste ativos:"
	docker ps --filter "name=elasticsearch" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

stop-test-containers: ## Para todos os containers de teste
	@echo "üõë Parando containers de teste..."
	-docker stop $$(docker ps -q --filter "name=shared-elasticsearch-test")
	-docker rm $$(docker ps -aq --filter "name=shared-elasticsearch-test")

# Valida√ß√µes
validate: fmt vet lint test-all ## Executa todas as valida√ß√µes do projeto
	@echo "‚úÖ Todas as valida√ß√µes passaram!"

# Informa√ß√µes do sistema
info: ## Mostra informa√ß√µes do ambiente
	@echo "‚ÑπÔ∏è Informa√ß√µes do ambiente:"
	@echo "Go version: $$(go version)"
	@echo "Docker version: $$(docker --version 2>/dev/null || echo 'Docker n√£o dispon√≠vel')"
	@echo "Testcontainers: $$(go list -m github.com/testcontainers/testcontainers-go 2>/dev/null || echo 'n√£o instalado')"
	@echo "Elasticsearch client: $$(go list -m github.com/elastic/go-elasticsearch/v8 2>/dev/null || echo 'n√£o instalado')"